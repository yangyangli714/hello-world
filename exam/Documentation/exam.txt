=============================================================================
List of generated methods in project: exam

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "Pins1"     (component PinSettings)

Module "Term1"     (component Term)
   - Term1_CRLF -Send CRLF to terminal.
   - Term1_SendStr -Send string to terminal.
   - Term1_SendNum -Send number to terminal.
   - Term1_SendFloatNum -Send a float number to the terminal. Due to the transformations the maximum float number is limited 
                according to the following conditions:     - positive number: 9 digits for integer part with 4 digits for 
                fractional part.     - negative numbers: 8 digits for integer part with 4 digits for fractional part.
   - Term1_SendChar -Send char to terminal.
   - Term1_Cls -Clear the terminal window.
   - Term1_MoveTo -Move cursor to position x, y. Range of coordinates can be from 1 to the size, which depends on the used 
                terminal. Position [1,1] represents the upper left corner.
   - Term1_SetColor -Set foreground and background color. The following color constant are defined in the header file:   
                clBlack - Black color   clRed - Red color   clGreen - Green color   clYellow - Yellow color   clBlue - Blue 
                color   clMagenta - Magenta color   clCyan - Cyan color   clWhite - White color
   - Term1_EraseLine -Clears the current line from the cursor position to the end of line.
   - Term1_ReadChar -Read char from terminal.
   - Term1_KeyPressed -Test if char was received from the terminal.

Module "AD1"       (component ADC)
   - AD1_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: If the 
                <number of conversions> is more than one the conversion of A/D channels is performed specified number of times.)
   - AD1_GetValue16 -This method returns the last measured values of all channels. Compared with <GetValue> method this method 
                returns more accurate result if the <number of conversions> is greater than 1 and <AD resolution> is less than 
                16 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - AD1_Calibrate -This method starts self calibration process. Calibration is typically used to remove the effects of the 
                gain and offset from a specific reading.

Module "RED"       (component BitIO)
   - RED_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - RED_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or a 
                register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - RED_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - RED_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "GREEN"     (component BitIO)
   - GREEN_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - GREEN_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - GREEN_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - GREEN_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "BLUE"      (component BitIO)
   - BLUE_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - BLUE_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - BLUE_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - BLUE_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "FC321"     (component FreeCntr32)
   - FC321_Reset -This method clears the counter.
   - FC321_GetTimeUS -This method returns the time (as a 16-bit unsigned integer) in microseconds since the last resetting 
                after the last reset.
   - FC321_GetTimeMS -This method returns the time (as a 16-bit unsigned integer) in milliseconds since the last resetting 
                after the last reset.

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU1_ResetCounter -Resets counter. If counter is counting up then it is set to zero. If counter is counting down then 
                counter is updated to the reload value.   The method is not available if HW doesn't allow resetting of the 
                counter.

Module "Cpu"       (component MK22FN512DC12)

===================================================================================
